// INCLUDING LIBRARIES
#include <SharpIR.h>         //IR sensor lib
#include <SparkFun_TB6612.h> //MOTOR DRIVER LIBRARY


//Defining pins
#define AIN1 7 // m1
#define BIN1 13
#define AIN2 8
#define BIN2 4 // m2
#define PWMA 10
#define PWMB 6
#define STBY 9

#define model 1080

const int offsetA = 1;
const int offsetB = 1;

Motor motor1 = Motor(AIN1, AIN2, PWMA, offsetA, STBY);
Motor motor2 = Motor(BIN1, BIN2, PWMB, offsetB, STBY);

int dirn = 0; // tell the alignment
int i = 0, j = 0;

int encoderPin1 = 3;
int encoderPin2 = 2;
volatile int lastEncoded = 0;
volatile long encoderValue = 0;
volatile long correctEncoderValue = 0;

long lastencoderValue = 0;

int lastMSB = 0;
int lastLSB = 0;

/*QUEUE CODE*/
float inp_arr[100];
int Rear = -1;
int Front = -1;
void enqueue(float insert_item)
{

    if (Front == -1)
        Front = 0;
    else if (Front == Rear)
    {
        Front = -1;
        Rear = -1;
        Front = 0;
    }
    Rear = Rear + 1;
    inp_arr[Rear] = insert_item;
}
void dequeue()
{
    Front = Front + 1;
}

//Sensor input
int left_ir, left_angle_ir, front_left_ir, right_angle_ir, right_ir;
int left_wall, left_angle_wall, front_left_wall, right_angle_wall, right_wall;
// SharpIR sensor0 = SharpIR(A0, model);
SharpIR sensor1( SharpIR::GP2Y0A21YK0F, A1 );
SharpIR sensor2( SharpIR::GP2Y0A21YK0F, A2 );
SharpIR sensor3( SharpIR::GP2Y0A21YK0F, A3 );
SharpIR sensor4 ( SharpIR::GP2Y0A21YK0F, A4 );
SharpIR sensor5( SharpIR::GP2Y0A21YK0F, A5 );

void readSensor()
{
    left_ir = sensor1.getDistance();
    left_angle_ir = sensor2.getDistance();
    front_left_ir = sensor3.getDistance();
    right_angle_ir = sensor4.getDistance();
    right_ir = sensor5.getDistance();

    if (left_ir <= 15)
        left_wall = 1;
    else
        left_wall = 0;
    if (left_angle_ir <= 7)
        left_angle_wall = 1;
    else
        left_angle_wall = 0;
    if (front_left_ir <= 15)
        front_left_wall = 1;
    else
        front_left_wall = 0;
    if (right_angle_ir <= 7)
        right_angle_wall = 1;
    else
        right_angle_wall = 0;
    if (right_ir <= 15)
        right_wall = 1;
    else
        right_wall = 0;
}

//PID code

void PID()
{
    static int previous_error = 0;
    static int Kp = 16, Ki = 1, Kd = 4; // constants for scaling P I D effects (will need adjusting)
    static int error, P, I = 0, D;      // error variables
    int total;

    error = (right_angle_ir + right_ir) / 2 - (left_ir + left_angle_ir) / 2;

    P = error * Kp;

    I = (I + error) * Ki;

    D = (error - previous_error) * Kd; // may take out
    previous_error = error;

    total = (P + I + D);
}


//Defining movement array
int maze[16][16] =
    {
        {14, 13, 12, 11, 10, 9, 8, 7, 7, 8, 9, 10, 11, 12, 13, 14},
        {13, 12, 11, 10, 9, 8, 7, 6, 6, 7, 8, 9, 10, 11, 12, 13},
        {12, 11, 10, 9, 8, 7, 6, 5, 5, 6, 7, 8, 9, 10, 11, 12},
        {11, 10, 9, 8, 7, 6, 5, 4, 4, 5, 6, 7, 8, 9, 10, 11},
        {10, 9, 8, 7, 6, 5, 4, 3, 3, 4, 5, 6, 7, 8, 9, 10},
        {9, 8, 7, 6, 5, 4, 3, 2, 2, 3, 4, 5, 6, 7, 8, 9},
        {8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8},
        {7, 6, 5, 4, 3, 2, 1, 0, 0, 1, 2, 3, 4, 5, 6, 7},
        {7, 6, 5, 4, 3, 2, 1, 0, 0, 1, 2, 3, 4, 5, 6, 7},
        {8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8},
        {9, 8, 7, 6, 5, 4, 3, 2, 2, 3, 4, 5, 6, 7, 8, 9},
        {10, 9, 8, 7, 6, 5, 4, 3, 3, 4, 5, 6, 7, 8, 9, 10},
        {11, 10, 9, 8, 7, 6, 5, 4, 4, 5, 6, 7, 8, 9, 10, 11},
        {12, 11, 10, 9, 8, 7, 6, 5, 5, 6, 7, 8, 9, 10, 11, 12},
        {13, 12, 11, 10, 9, 8, 7, 6, 6, 7, 8, 9, 10, 11, 12, 13},
        {14, 13, 12, 11, 10, 9, 8, 7, 7, 8, 9, 10, 11, 12, 13, 14}

};
//(8,8);(8,9);(9,8);(9,9);

//Defining wall Array
int wallArray[16][16] =
    {
        {14, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 3},
        {5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6}

};

//Neighbour update code
void neighbourUpdate(int h, int k)
{

    if (wallArray[h][k] == 1)
    {
        enqueue((h - 1) + (k) / 100.0);
        enqueue((h + 1) + (k) / 100.0);
        enqueue((h) + (k + 1) / 100.0);
    }
    else if (wallArray[h][k] == 2)
    {
        enqueue((h) + (k + 1) / 100.0);
        enqueue((h) + (k - 1) / 100.0);
        enqueue((h + 1) + (k) / 100.0);
    }
    else if (wallArray[h][k] == 3)
    {
        enqueue((h - 1) + (k) / 100.0);
        enqueue((h + 1) + (k) / 100.0);
        enqueue((h) + (k - 1) / 100.0);
    }
    else if (wallArray[h][k] == 4)
    {
        enqueue((h) + (k + 1) / 100.0);
        enqueue((h) + (k - 1) / 100.0);
        enqueue((h - 1) + (k) / 100.0);
    }
    else if (wallArray[h][k] == 5)
    {
        enqueue((h - 1) + (k) / 100.0);
        enqueue((h) + (k + 1) / 100.0);
    }
    else if (wallArray[h][k] == 6)
    {
        enqueue((h - 1) + (k) / 100.0);
        enqueue((h) + (k - 1) / 100.0);
    }
    else if (wallArray[h][k] == 7)
    {
        enqueue((h + 1) + (k) / 100.0);
        enqueue((h) + (k - 1) / 100.0);
    }
    else if (wallArray[h][k] == 8)
    {
        enqueue((h + 1) + (k) / 100.0);
        enqueue((h) + (k + 1) / 100.0);
    }
    else if (wallArray[h][k] == 9)
    {
        enqueue((h - 1) + (k) / 100.0);
        enqueue((h + 1) + (k) / 100.0);
    }
    else if (wallArray[h][k] == 10)
    {
        enqueue((h) + (k + 1) / 100.0);
        enqueue((h) + (k - 1) / 100.0);
    }
    else if (wallArray[h][k] == 11)
    {
        enqueue((h - 1) + (k) / 100.0);
    }
    else if (wallArray[h][k] == 12)
    {
        enqueue((h) + (k - 1) / 100.0);
    }
    else if (wallArray[h][k] == 13)
    {
        enqueue((h + 1) + (k) / 100.0);
    }
    else if (wallArray[h][k] == 14)
    {
        enqueue((h) + (k + 1) / 100.0);
    }
    else if (wallArray[h][k] == 15)
    {
        enqueue((h) + (k + 1) / 100.0);
        enqueue((h) + (k - 1) / 100.0);
        enqueue((h + 1) + (k) / 100.0);
        enqueue((h - 1) + (k) / 100.0);
    }
}

//Finding the minimum neighbour
int neighbourMin(int k, int l)
{
    if (dirn == 0)
    {
        if (wallArray[k][l] == 1)
        {
            int arr[3] = {0};

            arr[0] = maze[k + 1][l];
            arr[1] = maze[k][l + 1];
            arr[2] = maze[k - 1][l];
            int min = arr[0];
            for (int i = 0; i < 3; i++)
            {
                if (arr[i] < min)
                {
                    min = arr[i];
                }
            }
            return min;
        }
    
     else if (wallArray[k][l] == 3)
     {
        int arr[3] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k][l - 1];
        arr[2] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
     }
    else if (wallArray[k][l] == 4)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k][l + 1];
        arr[2] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
     else if (wallArray[k][l] == 5)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 6)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }

    else if (wallArray[k][l] == 9)
    {
        int arr[2] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    
    else if (wallArray[k][l] == 11)
    {

        int min = maze[k - 1][l];

        return min;
    }
    
    else if (wallArray[k][l] == 15)
    {
        int arr[4] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k][l - 1];
        arr[2] = maze[k + 1][l];
        arr[3] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 4; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 2)
    {
        int arr[3] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k][l - 1];
        arr[2] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }

        return min;
    }
    else if (wallArray[k][l] == 7)
    {
        int arr[2] = {0};

        arr[0] = maze[k+1][l];
        arr[1] = maze[k ][l-1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 8)
    {
        int arr[2] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 10)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 12)
    {

        int min = maze[k][l - 1];
        return min;
    }
    else if (wallArray[k][l] == 13)
    {

        int min = maze[k + 1][l];

        return min;
    }
    else if (wallArray[k][l] == 14)
    {

        int min = maze[k][l + 1];
        return min;
    }
    
  }

 else if (dirn == 1)
 {
    if (wallArray[k][l] == 1)
    {
        int arr[3] = {0};

        arr[2] = maze[k - 1][l];
        arr[1] = maze[k + 1][l];
        arr[0] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 2)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k + 1][l];
        arr[2] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    
    else if (wallArray[k][l] == 4)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k - 1][l];
        arr[2] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 5)
    {
        int arr[2] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    
    else if (wallArray[k][l] == 8)
    {
        int arr[2] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    
    else if (wallArray[k][l] == 10)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    
    else if (wallArray[k][l] == 14)
    {

        int min = maze[k][l + 1];
        return min;
    }
    else if (wallArray[k][l] == 15)
    {
        int arr[4] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k + 1][l];
        arr[2] = maze[k - 1][l];
        arr[3] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 4; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 3)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k - 1][l];
        arr[2] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 6)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 7)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 9)
    {
        int arr[2] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 11)
    {

        int min = maze[k - 1][l];

        return min;
    }
    else if (wallArray[k][l] == 12)
    {

        int min = maze[k][l - 1];
        return min;
    }
    else if (wallArray[k][l] == 13)
    {

        int min = maze[k + 1][l];

        return min;
    }
  }




  else if (dirn == 2)
 {
    if (wallArray[k][l] == 1)
    {
        int arr[3] = {0};
        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l + 1];
        arr[2] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 2)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k][l - 1];
        arr[2] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 3)
    {
        int arr[3] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l - 1];
        arr[2] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    
    else if (wallArray[k][l] == 7)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 8)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 9)
    {
        int arr[2] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    
    else if (wallArray[k][l] == 13)
    {

        int min = maze[k + 1][l];

        return min;
    }
   
    else if (wallArray[k][l] == 15)
    {
        int arr[4] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k + 1][l];
        arr[2] = maze[k - 1][l];
        arr[3] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 4; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 4)
    {
        int arr[3] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l + 1];
        arr[2] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 5)
    {
        int arr[2] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 6)
    {
        int arr[2] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 10)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 11)
    {

        int min = maze[k - 1][l];

        return min;
    }
    else if (wallArray[k][l] == 12)
    {

        int min = maze[k][l - 1];
        return min;
    }
     else if (wallArray[k][l] == 14)
    {

        int min = maze[k][l + 1];
        return min;
    }
  }







  else if (dirn == 3)
  {
    
    if (wallArray[k][l] == 2)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k + 1][l];
        arr[2] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 3)
    {
        int arr[3] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k - 1][l];
        arr[2] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 4)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k - 1][l];
        arr[2] = maze[1][l - 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    
    else if (wallArray[k][l] == 6)
    {
        int arr[2] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 7)
    {
        int arr[2] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    
    else if (wallArray[k][l] == 10)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    
    else if (wallArray[k][l] == 12)
    {

        int min = maze[k][l - 1];
        return min;
    }
    
    else if (wallArray[k][l] == 15)
    {
        int arr[4] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k + 1][l];
        arr[2] = maze[k - 1][l];
        arr[3] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 4; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 1)
    {
        int arr[3] = {0};
        arr[0] = maze[k][l + 1];
        arr[1] = maze[k + 1][l];
        arr[2] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 5)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 8)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 9)
    {
        int arr[2] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        return min;
    }
    else if (wallArray[k][l] == 11)
    {

        int min = maze[k - 1][l];

        return min;
    }
    else if (wallArray[k][l] == 13)
    {

        int min = maze[k + 1][l];

        return min;
    }
    else if (wallArray[k][l] == 14)
    {

        int min = maze[k][l + 1];
        return min;
    }
  }
}


//finding the coorfinate of min
float neighbourMinCoordinate(int k, int l)
{
    int i = k;
    int j = l;
    float cord = 0.0;
   if (dirn == 0)
    {
        if (wallArray[k][l] == 1)
        {
            int arr[3] = {0};

            arr[0] = maze[k + 1][l];
            arr[1] = maze[k][l + 1];
            arr[2] = maze[k - 1][l];
            int min = arr[0];
            for (int i = 0; i < 3; i++)
            {
                if (arr[i] < min)
                {
                    min = arr[i];
                }
            }
            if (min == arr[0])
            cord = (k +1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k ) + (l+1)/ 100.0;
        else if (min == arr[2])
            cord = (k-1) + (l) / 100.0;

        return cord;
        }
    
     else if (wallArray[k][l] == 3)
     {
        int arr[3] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k][l - 1];
        arr[2] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k +1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k) + (l-1)/ 100.0;
        else if (min == arr[2])
            cord = (k-1) + (l ) / 100.0;

        return cord;
     }
    else if (wallArray[k][l] == 4)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k][l + 1];
        arr[2] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l-1)/ 100.0;
        else if (min == arr[1])
            cord = (k) + (l+1)/ 100.0;
        else if (min == arr[2])
            cord = (k-1) + (l ) / 100.0;

        return cord;
    }
     else if (wallArray[k][l] == 5)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l+1)/ 100.0;
        else if (min == arr[1])
            cord = (k -1) + (l)/ 100.0;


        return cord;
    }
    else if (wallArray[k][l] == 6)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l-1)/ 100.0;
        else if (min == arr[1])
            cord = (k - 1) + (l)/ 100.0;

        return cord;
    }

    else if (wallArray[k][l] == 9)
    {
        int arr[2] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k +1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k - 1) + (l)/ 100.0;

        return cord;
    }
    
    else if (wallArray[k][l] == 11)
    {

        int min = maze[k - 1][l];


            cord = (k - 1) + (l)/ 100.0;
        return cord;
    }
    
    else if (wallArray[k][l] == 15)
    {
        int arr[4] = {0};

        arr[0] = maze[k+1][l];
        arr[1] = maze[k][l - 1];
        arr[2] = maze[k ][l+1];
        arr[3] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 4; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k +1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k) + (l-1)/ 100.0;
        else if (min == arr[2])
            cord = (k) + (l +1) / 100.0;
        else if (min == arr[3])
            cord = (k-1) + (l ) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 2)
    {
        int arr[3] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k][l - 1];
        arr[2] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }

        if (min == arr[0])
            cord = (k + 1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k ) + (l-1)/ 100.0;
        else if (min == arr[2])
            cord = (k) + (l + 1) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 7)
    {
        int arr[2] = {0};

        arr[0] = maze[k+1][l];
        arr[1] = maze[k ][l-1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k + 1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k ) + (l-1)/ 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 8)
    {
        int arr[2] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k +1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k ) + (l+1)/ 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 10)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k) + (l-1)/ 100.0;
        else if (min == arr[1])
            cord = (k) + (l+1)/ 100.0;


        return cord;
    }
    else if (wallArray[k][l] == 12)
    {

        int min = maze[k][l - 1];


            cord = (k) + (l - 1) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 13)
    {

        int min = maze[k + 1][l];


            cord = (k + 1) + (l)/ 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 14)
    {

        int min = maze[k][l + 1];

            cord = (k) + (l + 1) / 100.0;

        return cord;
    }
    
  }

 else if (dirn == 1)
 {
    if (wallArray[k][l] == 1)
    {
        int arr[3] = {0};

        arr[2] = maze[k - 1][l];
        arr[1] = maze[k + 1][l];
        arr[0] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k - 1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k + 1) + (l)/ 100.0;
        else if (min == arr[2])
            cord = (k) + (l + 1) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 2)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k + 1][l];
        arr[2] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l-1)/ 100.0;
        else if (min == arr[1])
            cord = (k + 1) + (l)/ 100.0;
        else if (min == arr[2])
            cord = (k) + (l + 1) / 100.0;

        return cord;
    }
    
    else if (wallArray[k][l] == 4)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k - 1][l];
        arr[2] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k) + (l-1)/ 100.0;
        else if (min == arr[1])
            cord = (k -1) + (l)/ 100.0;
        else if (min == arr[2])
            cord = (k) + (l + 1) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 5)
    {
        int arr[2] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k - 1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k) + (l + 1) / 100.0;

        return cord;
    }
    
    else if (wallArray[k][l] == 8)
    {
        int arr[2] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k + 1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k) + (l + 1) / 100.0;

        return cord;
    }
    
    else if (wallArray[k][l] == 10)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k) + (l-1)/ 100.0;
        else if (min == arr[1])
            cord = (k ) + (l+1)/ 100.0;

        return cord;
    }
    
    else if (wallArray[k][l] == 14)
    {

        int min = maze[k][l + 1];

            cord = (k) + (l + 1) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 15)
    {
        int arr[4] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k + 1][l];
        arr[2] = maze[k - 1][l];
        arr[3] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 4; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l+1)/ 100.0;
        else if (min == arr[1])
            cord = (k+1) + (l)/ 100.0;
        else if (min == arr[2])
            cord = (k-1) + (l ) / 100.0;
        else if (min == arr[3])
            cord = (k) + (l-1) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 3)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k - 1][l];
        arr[2] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k) + (l-1)/ 100.0;
        else if (min == arr[1])
            cord = (k - 1) + (l)/ 100.0;
        else if (min == arr[2])
            cord = (k+1) + (l ) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 6)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l-1)/ 100.0;
        else if (min == arr[1])
            cord = (k - 1) + (l)/ 100.0;


        return cord;
    }
    else if (wallArray[k][l] == 7)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k) + (l-1)/ 100.0;
        else if (min == arr[1])
            cord = (k + 1) + (l)/ 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 9)
    {
        int arr[2] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k - 1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k + 1) + (l)/ 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 11)
    {

        int min = maze[k - 1][l];

            cord = (k - 1) + (l)/ 100.0;
 

        return cord;
    }
    else if (wallArray[k][l] == 12)
    {

        int min = maze[k][l - 1];
 
            cord = (k) + (l - 1) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 13)
    {

        int min = maze[k + 1][l];


            cord = (k + 1) + (l)/ 100.0;


        return cord;
    }
  }




  else if (dirn == 2)
 {
    if (wallArray[k][l] == 1)
    {
        int arr[3] = {0};
        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l + 1];
        arr[2] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k - 1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k ) + (l+1)/ 100.0;
        else if (min == arr[2])
            cord = (k+1) + (l) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 2)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k][l - 1];
        arr[2] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l+1)/ 100.0;
        else if (min == arr[1])
            cord = (k) + (l-1)/ 100.0;
        else if (min == arr[2])
            cord = (k+1) + (l ) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 3)
    {
        int arr[3] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l - 1];
        arr[2] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k - 1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k ) + (l-1)/ 100.0;
        else if (min == arr[2])
            cord = (k+1) + (l ) / 100.0;

        return cord;
    }
    
    else if (wallArray[k][l] == 7)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l - 1];
        arr[1] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l-1)/ 100.0;
        else if (min == arr[1])
            cord = (k + 1) + (l)/ 100.0;
        return cord;
    }
    else if (wallArray[k][l] == 8)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l+1)/ 100.0;
        else if (min == arr[1])
            cord = (k + 1) + (l)/ 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 9)
    {
        int arr[2] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k - 1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k + 1) + (l)/ 100.0;

        return cord;
    }
    
    else if (wallArray[k][l] == 13)
    {

        int min = maze[k + 1][l];


            cord = (k + 1) + (l)/ 100.0;


        return cord;
    }
   
    else if (wallArray[k][l] == 15)
    {
        int arr[4] = {0};

        arr[0] = maze[k-1][l ];
        arr[1] = maze[k ][l+1];
        arr[2] = maze[k ][l-1];
        arr[3] = maze[k+1][l];
        int min = arr[0];
        for (int i = 0; i < 4; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k-1 ) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k ) + l+1/ 100.0;
        else if (min == arr[2])
            cord = (k) + (l-1 ) / 100.0;
        else if (min == arr[3])
            cord = (k+1) + (l ) / 100.0;

        return cord;

    }
    else if (wallArray[k][l] == 4)
    {
        int arr[3] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l + 1];
        arr[2] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k - 1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k) + (l+1)/ 100.0;
        else if (min == arr[2])
            cord = (k) + (l - 1) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 5)
    {
        int arr[2] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l + 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k - 1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k) + (l + 1) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 6)
    {
        int arr[2] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k - 1) + (l)/ 100.0;
        else if (min == arr[2])
            cord = (k) + (l - 1) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 10)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l+1)/ 100.0;
        else if (min == arr[1])
            cord = (k ) + (l-1)/ 100.0;


        return cord;
    }
    else if (wallArray[k][l] == 11)
    {

        int min = maze[k - 1][l];


            cord = (k - 1) + (l)/ 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 12)
    {

        int min = maze[k][l - 1];

            cord = (k) + (l-1)/ 100.0;
        return cord;
    }
     else if (wallArray[k][l] == 14)
    {

        int min = maze[k][l + 1];

            cord = (k) + (l + 1) / 100.0;

        return cord;
    }
  }







  else if (dirn == 3)
  {
    
    if (wallArray[k][l] == 2)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k + 1][l];
        arr[2] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l+1)/ 100.0;
        else if (min == arr[1])
            cord = (k + 1) + (l)/ 100.0;
        else if (min == arr[2])
            cord = (k) + (l - 1) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 3)
    {
        int arr[3] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k - 1][l];
        arr[2] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k + 1) + (l)/ 100.0;
        else if (min == arr[1])
            cord = (k - 1) + (l)/ 100.0;
        else if (min == arr[2])
            cord = (k) + (l - 1) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 4)
    {
        int arr[3] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k - 1][l];
        arr[2] = maze[1][l - 1];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l+1)/ 100.0;
        else if (min == arr[1])
            cord = (k + 1) + (l)/ 100.0;
        else if (min == arr[2])
            cord = (k) + (l - 1) / 100.0;

        return cord;
    }
    
    else if (wallArray[k][l] == 6)
    {
        int arr[2] = {0};

        arr[0] = maze[k - 1][l];
        arr[1] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k - 1) + l/ 100.0;

        else if (min == arr[1])
            cord = (k) + (l - 1) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 7)
    {
        int arr[2] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k +1) + l/ 100.0;
        else if (min == arr[1])
            cord = (k) + (l-1)/ 100.0;


        return cord;
    }
    
    else if (wallArray[k][l] == 10)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k][l - 1];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
       if (min == arr[0])
            cord = (k ) + (l+1)/ 100.0;
        else if (min == arr[1])
            cord = (k ) + (l-1)/ 100.0;
        

        return cord;
    }
    
    else if (wallArray[k][l] == 12)
    {

        int min = maze[k][l - 1];
        
            cord = (k) + (l -1) / 100.0;
            return cord;
    }
    
    else if (wallArray[k][l] == 15)
    {
        int arr[4] = {0};

        arr[0] = maze[k-1][l ];
        arr[1] = maze[k ][l+1];
        arr[2] = maze[k ][l-1];
        arr[3] = maze[k+1][l];
        int min = arr[0];
        for (int i = 0; i < 4; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l-1)/ 100.0;
        else if (min == arr[1])
            cord = (k +1) + l/ 100.0;
        else if (min == arr[2])
            cord = (k-1) + (l ) / 100.0;
        else if (min == arr[3])
            cord = (k) + (l+1 ) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 1)
    {
        int arr[3] = {0};
        arr[0] = maze[k][l + 1];
        arr[1] = maze[k + 1][l];
        arr[2] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 3; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l+1)/ 100.0;
        else if (min == arr[1])
            cord = (k + 1) + l/ 100.0;
        else if (min == arr[2])
            cord = (k-1) + (l ) / 100.0;

        return cord;
    }
    else if (wallArray[k][l] == 5)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l+1)/ 100.0;
        else if (min == arr[1])
            cord = (k - 1) + l/ 100.0;
        

        return cord;
    }
    else if (wallArray[k][l] == 8)
    {
        int arr[2] = {0};

        arr[0] = maze[k][l + 1];
        arr[1] = maze[k + 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
        if (min == arr[0])
            cord = (k ) + (l+1)/ 100.0;
        else if (min == arr[1])
            cord = (k + 1) + l/ 100.0;
        

        return cord;
    }
    else if (wallArray[k][l] == 9)
    {
        int arr[2] = {0};

        arr[0] = maze[k + 1][l];
        arr[1] = maze[k - 1][l];
        int min = arr[0];
        for (int i = 0; i < 2; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }
        }
      if (min == arr[0])
            cord = (k + 1) + l / 100.0;
        else if (min == arr[1])
            cord = (k - 1) + l / 100.0;
        return cord;

    }
    else if (wallArray[k][l] == 11)
    {

        int min = maze[k - 1][l];
            cord = (k - 1) + l / 100.0;


        return cord;

    }
    else if (wallArray[k][l] == 13)
    {

        int min = maze[k + 1][l];
            cord = (k + 1) + l / 100.0;
        return cord;
    }
    else if (wallArray[k][l] == 14)
    {

        int min = maze[k][l + 1];
        
        cord = (k) + (l + 1) / 100.0;

        return cord;
    }
  }
  
}

//Code to update the wall array
void updateWallarray(int w)
{
    if (w == 0)
    {
        if (left_wall == 0 && front_left_wall == 0 && right_wall == 1)
            wallArray[i][j] = 1;
        else if (left_wall == 1 && front_left_wall == 0 && right_wall == 0)
            wallArray[i][j] = 3;
        else if (left_wall == 0 && front_left_wall == 1 && right_wall == 0)
            wallArray[i][j] = 4;
        else if (left_wall == 0 && front_left_wall == 1 && right_wall == 1)
            wallArray[i][j] = 5;
        else if (left_wall == 1 && front_left_wall == 1 && right_wall == 0)
            wallArray[i][j] = 6;
        else if (left_wall == 1 && front_left_wall == 0 && right_wall == 1)
            wallArray[i][j] = 9;
        else if (left_wall == 1 && front_left_wall == 1 && right_wall == 1)
            wallArray[i][j] = 11;
        else if (left_wall == 0 && front_left_wall == 0 && right_wall == 0)
            wallArray[i][j] = 15;
    }
    else if (w == 1)
    {
        if (left_wall == 0 && front_left_wall == 1 && right_wall == 0)
            wallArray[i][j] = 1;
        else if (left_wall == 0 && front_left_wall == 0 && right_wall == 1)
            wallArray[i][j] = 2;
        else if (left_wall == 1 && front_left_wall == 0 && right_wall == 0)
            wallArray[i][j] = 4;
        else if (left_wall == 1 && front_left_wall == 1 && right_wall == 0)
            wallArray[i][j] = 5;
        else if (left_wall == 0 && front_left_wall == 1 && right_wall == 1)
            wallArray[i][j] = 8;
        else if (left_wall == 1 && front_left_wall == 0 && right_wall == 1)
            wallArray[i][j] = 10;
        else if (left_wall == 1 && front_left_wall == 1 && right_wall == 1)
            wallArray[i][j] = 14;
        else if (left_wall == 0 && front_left_wall == 0 && right_wall == 0)
            wallArray[i][j] = 15;
    }
    else if (w == 2)
    {
        if (left_wall == 1 && front_left_wall == 0 && right_wall == 0)
            wallArray[i][j] = 1;
        else if (left_wall == 0 && front_left_wall == 1 && right_wall == 0)
            wallArray[i][j] = 2;
        else if (left_wall == 0 && front_left_wall == 0 && right_wall == 1)
            wallArray[i][j] = 3;
        else if (left_wall == 0 && front_left_wall == 1 && right_wall == 1)
            wallArray[i][j] = 7;
        else if (left_wall == 1 && front_left_wall == 1 && right_wall == 0)
            wallArray[i][j] = 8;
        else if (left_wall == 1 && front_left_wall == 0 && right_wall == 1)
            wallArray[i][j] = 9;
        else if (left_wall == 1 && front_left_wall == 1 && right_wall == 1)
            wallArray[i][j] = 13;
        else if (left_wall == 0 && front_left_wall == 0 && right_wall == 0)
            wallArray[i][j] = 15;
    }
    else if (w == 3)
    {
        if (left_wall == 1 && front_left_wall == 0 && right_wall == 0)
            wallArray[i][j] = 2;
        else if (left_wall == 0 && front_left_wall == 1 && right_wall == 0)
            wallArray[i][j] = 3;
        else if (left_wall == 0 && front_left_wall == 0 && right_wall == 1)
            wallArray[i][j] = 4;
        else if (left_wall == 0 && front_left_wall == 1 && right_wall == 1)
            wallArray[i][j] = 6;
        else if (left_wall == 1 && front_left_wall == 1 && right_wall == 0)
            wallArray[i][j] = 7;
        else if (left_wall == 1 && front_left_wall == 0 && right_wall == 1)
            wallArray[i][j] = 10;
        else if (left_wall == 1 && front_left_wall == 1 && right_wall == 1)
            wallArray[i][j] = 12;
        else if (left_wall == 0 && front_left_wall == 0 && right_wall == 0)
            wallArray[i][j] = 15;
    }
}


//Movement code
void Straight()
{
    while (correctEncoderValue < 201 && correctEncoderValue >= -10)
    {
        forward(motor1, motor2, 200);
        correctEncoderValue = encoderValue / 4;
    }
    Serial.println(correctEncoderValue);
    brake(motor1, motor2);
    delay(1000);
}

void turnLeft()
{
    while (correctEncoderValue > -100 && correctEncoderValue <= 0)
    {
        right(motor1, motor2, 200);
        correctEncoderValue = encoderValue / 4;
    }
    Serial.println(correctEncoderValue);
    brake(motor1, motor2);

    lastencoderValue = 0;
    correctEncoderValue = 0;
    encoderValue = 0;
    lastEncoded = 0;
    lastMSB = 0;
    lastLSB = 0;
    delay(1000);
    if (dirn == 0)
        dirn = 3;
    else if (dirn == 1)
        dirn = 0;
    else if (dirn == 2)
        dirn = 1;
    else if (dirn == 3)
        dirn = 2;
    Straight();
}

void turnRight()
{
    while (correctEncoderValue < 100 && correctEncoderValue >= -10)
    {
        left(motor1, motor2, 200);
        correctEncoderValue = encoderValue / 4;
    }
    Serial.println(correctEncoderValue);
    brake(motor1, motor2);

    lastencoderValue = 0;
    correctEncoderValue = 0;
    encoderValue = 0;
    lastEncoded = 0;
    lastMSB = 0;
    lastLSB = 0;
    delay(1000);

    if (dirn == 0)
        dirn = 1;
    else if (dirn == 1)
        dirn = 2;
    else if (dirn == 2)
        dirn = 3;
    else if (dirn == 3)
        dirn = 0;
    Straight();
}

void uTurn()
{
    while (correctEncoderValue < 200 && correctEncoderValue >= -10)
    {
        right(motor1, motor2, 200);
        correctEncoderValue = encoderValue / 4;
    }
    Serial.println(correctEncoderValue);
    brake(motor1, motor2);

    lastencoderValue = 0;
    correctEncoderValue = 0;
    encoderValue = 0;
    lastEncoded = 0;
    lastMSB = 0;
    lastLSB = 0;
    delay(1000);

    if (dirn == 0)
        dirn = 2;
    else if (dirn == 1)
        dirn = 3;
    else if (dirn == 2)
        dirn = 0;
    else if (dirn == 3)
        dirn = 1;
    Straight();
}

void movement(int xCord, int yCord)
{
    if (dirn == 0)
    {
        if (xCord > i)
        {
            Straight();
        }
        else if (xCord < i)
        {
            uTurn();
        }
        else if (yCord < j)
        {
            turnRight();
        }
        else if (yCord > j)
        {
            turnLeft();
        }
    }
    else if (dirn == 1)
    {
        if (yCord < j)
        {
            Straight();
        }
        else if (yCord > j)
        {
            uTurn();
        }
        else if (xCord < i)
        {
            turnRight();
        }
        else if (xCord > i)
        {
            turnLeft();
        }
    }
    else if (dirn == 2)
    {
        if (xCord < i)
        {
            Straight();
        }
        else if (xCord > i)
        {
            uTurn();
        }
        else if (yCord > j)
        {
            turnRight();
        }
        else if (yCord < j)
        {
            turnLeft();
        }
    }
    else if (dirn == 3)
    {
        if (yCord > j)
        {
            Straight();
        }
        else if (yCord < j)
        {
            uTurn();
        }
        else if (xCord > i)
        {
            turnRight();
        }
        else if (xCord < i)
        {
            turnLeft();
        }
    }
}


//Floodfill algorithm
void floodfill(int u, int v)
{

    int tempNeighbour = neighbourMin(u, v);
    maze[u][v] = tempNeighbour + 1;

    neighbourUpdate(u, v);
    while ((Front != Rear) && (Front != -1))
    {
        float padosi = inp_arr[Front] * 100;
        int bot = (int)padosi;
        int x = bot / 100;
        int y = bot % 100;
        dequeue();
        int n1 = neighbourMin(x, y);
        if (n1 >= maze[x][y])
        {
            floodfill(x, y);
        }
    }
}


//Encoder code
void updateEncoder()
{
    int MSB = digitalRead(encoderPin1); // MSB = most significant bit
    int LSB = digitalRead(encoderPin2); // LSB = least significant bit

    int encoded = (MSB << 1) | LSB;         // converting the 2 pin value to single number
    int sum = (lastEncoded << 2) | encoded; // adding it to the previous encoded value

    if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011)
        encoderValue++;
    if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000)
        encoderValue--;

    lastEncoded = encoded; // store this value for next time
}

void setup()
{

    pinMode(encoderPin1, INPUT);
    pinMode(encoderPin2, INPUT);
    digitalWrite(encoderPin1, HIGH); // turn pullup resistor on
    digitalWrite(encoderPin2, HIGH); // turn pullup resistor on
    attachInterrupt(0, updateEncoder, CHANGE);
    attachInterrupt(1, updateEncoder, CHANGE);

    Serial.begin(9600);
}

void loop()
{
    int wallmazeNo = wallArray[i][j];
    int min = neighbourMin(i, j);
    float temp = neighbourMinCoordinate(i, j) * 100;
    int temp1 = (int)temp;
    int xCord = temp1 / 100;
    int yCord = temp1 % 100;
    Serial.println(xCord);
    Serial.println(yCord);
    int currentValue = maze[i][j];
    if (min < currentValue)
    {
        movement(xCord, yCord);
        i = xCord;
        j = yCord;
        readSensor();
        updateWallarray(dirn);
    }
    else
    {
        floodfill(i, j);
    }
    //  float e = neighbourMinCoordinate(i,j);
    //  nx = int(e);
    //  ny = int((e-nx)*100);
}
